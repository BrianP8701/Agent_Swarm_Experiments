{
    "GithubWrapper": {
        "language": "python",
        "code_type": "class",
        "code": "import requests\nfrom github import Github\n\nclass GithubWrapper:\n    def __init__(self, access_token):\n        self.gh = Github(access_token)\n\n    def get_repo(self, repo_name):\n        return self.gh.get_repo(repo_name)\n\n    def create_repo(self, name, description='', private=False):\n        user = self.gh.get_user()\n        return user.create_repo(name, description=description, private=private)\n\n    def delete_repo(self, repo_name):\n        repo = self.get_repo(repo_name)\n        repo.delete()\n\n    def get_branches(self, repo_name):\n        repo = self.get_repo(repo_name)\n        return list(repo.get_branches())\n\n    def create_branch(self, repo_name, branch_name, sha):\n        repo = self.get_repo(repo_name)\n        ref = f'refs/heads/{branch_name}'\n        repo.create_git_ref(ref, sha)\n\n    def push_file(self, repo_name, branch_name, file_path, file_content, commit_message):\n        repo = self.get_repo(repo_name)\n        contents = repo.get_contents(file_path, ref=f'refs/heads/{branch_name}')\n        repo.update_file(contents.path, commit_message, file_content, contents.sha, branch=branch_name)\n\n    def add_file(self, repo_name, branch_name, file_path, file_content, commit_message):\n        repo = self.get_repo(repo_name)\n        repo.create_file(file_path, commit_message, file_content, branch=branch_name)\n\n    def get_commits(self, repo_name, branch_name='master'):\n        repo = self.get_repo(repo_name)\n        return list(repo.get_commits(sha=branch_name))\n\n    def get_contributors(self, repo_name):\n        repo = self.get_repo(repo_name)\n        return list(repo.get_contributors())\n\n    def get_issues(self, repo_name, state='open'):\n        repo = self.get_repo(repo_name)\n        return list(repo.get_issues(state=state))\n\n    def create_issue(self, repo_name, title, body=None, assignee=None, milestone=None, labels=None):\n        repo = self.get_repo(repo_name)\n        return repo.create_issue(title, body=body, assignee=assignee, milestone=milestone, labels=labels)\n\n    def close_issue(self, repo_name, issue_number):\n        repo = self.get_repo(repo_name)\n        issue = repo.get_issue(issue_number)\n        issue.edit(state='closed')\n\n    def merge_pull_request(self, repo_name, pull_number, commit_message=''):\n        repo = self.get_repo(repo_name)\n        pull_request = repo.get_pull(pull_number)\n        pull_request.merge(commit_message=commit_message)\n\n    def create_pull_request(self, repo_name, title, body, base, head, maintainer_can_modify=True):\n        repo = self.get_repo(repo_name)\n        return repo.create_pull(title=title, body=body, base=base, head=head, maintainer_can_modify=maintainer_can_modify)\n",
        "description": "A class that provides a wrapper around the GitHub API to interact with and modify GitHub repositories. It includes methods to retrieve information on existing repositories, push and add code to existing repositories, create new repositories, and perform other repository-related operations.",
        "dependencies": [
            "PyGithub",
            "requests"
        ]
    },
    "tic_tac_toe_4x4": {
        "language": "python",
        "code_type": "script",
        "code": "",
        "description": "A simple 4x4 tic-tac-toe game with a basic print to terminal interface for two players to play against each other. Players take turns to input their moves, and the game checks for win conditions after each move.",
        "dependencies": []
    }
}