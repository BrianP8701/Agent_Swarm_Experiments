{
    "GithubWrapper": {
        "language": "python",
        "code_type": "class",
        "code": "import requests\nfrom github import Github\n\nclass GithubWrapper:\n    def __init__(self, access_token):\n        self.gh = Github(access_token)\n\n    def get_repo(self, repo_name):\n        return self.gh.get_repo(repo_name)\n\n    def create_repo(self, name, description='', private=False):\n        user = self.gh.get_user()\n        return user.create_repo(name, description=description, private=private)\n\n    def delete_repo(self, repo_name):\n        repo = self.get_repo(repo_name)\n        repo.delete()\n\n    def get_branches(self, repo_name):\n        repo = self.get_repo(repo_name)\n        return list(repo.get_branches())\n\n    def create_branch(self, repo_name, branch_name, sha):\n        repo = self.get_repo(repo_name)\n        ref = f'refs/heads/{branch_name}'\n        repo.create_git_ref(ref, sha)\n\n    def push_file(self, repo_name, branch_name, file_path, file_content, commit_message):\n        repo = self.get_repo(repo_name)\n        contents = repo.get_contents(file_path, ref=f'refs/heads/{branch_name}')\n        repo.update_file(contents.path, commit_message, file_content, contents.sha, branch=branch_name)\n\n    def add_file(self, repo_name, branch_name, file_path, file_content, commit_message):\n        repo = self.get_repo(repo_name)\n        repo.create_file(file_path, commit_message, file_content, branch=branch_name)\n\n    def get_commits(self, repo_name, branch_name='master'):\n        repo = self.get_repo(repo_name)\n        return list(repo.get_commits(sha=branch_name))\n\n    def get_contributors(self, repo_name):\n        repo = self.get_repo(repo_name)\n        return list(repo.get_contributors())\n\n    def get_issues(self, repo_name, state='open'):\n        repo = self.get_repo(repo_name)\n        return list(repo.get_issues(state=state))\n\n    def create_issue(self, repo_name, title, body=None, assignee=None, milestone=None, labels=None):\n        repo = self.get_repo(repo_name)\n        return repo.create_issue(title, body=body, assignee=assignee, milestone=milestone, labels=labels)\n\n    def close_issue(self, repo_name, issue_number):\n        repo = self.get_repo(repo_name)\n        issue = repo.get_issue(issue_number)\n        issue.edit(state='closed')\n\n    def merge_pull_request(self, repo_name, pull_number, commit_message=''):\n        repo = self.get_repo(repo_name)\n        pull_request = repo.get_pull(pull_number)\n        pull_request.merge(commit_message=commit_message)\n\n    def create_pull_request(self, repo_name, title, body, base, head, maintainer_can_modify=True):\n        repo = self.get_repo(repo_name)\n        return repo.create_pull(title=title, body=body, base=base, head=head, maintainer_can_modify=maintainer_can_modify)\n",
        "description": "A class that provides a wrapper around the GitHub API to interact with and modify GitHub repositories. It includes methods to retrieve information on existing repositories, push and add code to existing repositories, create new repositories, and perform other repository-related operations.",
        "dependencies": [
            "PyGithub",
            "requests"
        ]
    },
    "TicTacToe": {
        "language": "python",
        "code_type": "script",
        "code": "def print_board(board):\n    for row in board:\n        print(' | '.join(row))\n        print('-' * 5)\n\ndef check_winner(board, player):\n    for row in board:\n        if all(s == player for s in row):\n            return True\n    for col in zip(*board):\n        if all(s == player for s in col):\n            return True\n    if all(board[i][i] == player for i in range(3)):\n        return True\n    if all(board[i][2 - i] == player for i in range(3)):\n        return True\n    return False\n\ndef get_move():\n    while True:\n        try:\n            x, y = map(int, input('Enter row and column numbers to fix spot: ').split())\n            if x in range(1, 4) and y in range(1, 4):\n                return x - 1, y - 1\n            else:\n                print('Invalid input. Try again.')\n        except ValueError:\n            print('Invalid input. Enter numbers only.')\n\ndef main():\n    board = [[' ' for _ in range(3)] for _ in range(3)]\n    players = ['X', 'O']\n    turn = 0\n\n    while True:\n        print_board(board)\n        print(f'Player {players[turn % 2]}, make your move.')\n        x, y = get_move()\n        if board[x][y] == ' ':\n            board[x][y] = players[turn % 2]\n            if check_winner(board, players[turn % 2]):\n                print_board(board)\n                print(f'Player {players[turn % 2]} wins!')\n                break\n            if all(all(cell != ' ' for cell in row) for row in board):\n                print_board(board)\n                print('The game is a draw!')\n                break\n            turn += 1\n        else:\n            print('This spot is already taken. Choose another.')\n\nif __name__ == '__main__':\n    main()\n",
        "description": "A simple command-line based Tic-Tac-Toe game where two players can play against each other. The board is a 3x3 grid, and players take turns to place their mark (X or O) on the grid. The game checks for a winner or a draw after each move and announces the result.",
        "dependencies": []
    },
    "hello_world": {
        "language": "python",
        "code_type": "script",
        "code": "print('Hello World')",
        "description": "A simple script that prints 'Hello World' to the console.",
        "dependencies": []
    },
    "hello_world_script": {
        "language": "python",
        "code_type": "script",
        "code": "print('Hello World')",
        "description": "A simple Python script that prints 'Hello World' to the console.",
        "dependencies": []
    }
}