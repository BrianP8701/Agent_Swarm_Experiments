{
    "router": {
        "script": "from swarm.swarm import Swarm\nasync def route(goal):\n    swarm = Swarm()\n    router_agent = swarm.agents['router']\n    options = ['break_down_goal', 'write_text', 'write_python', 'retrieve_info', 'ask_user_for_help']\n    \n    action_index = await router_agent.chat(goal)\n    action_index = action_index['arguments']['next_action']\n    node_blueprints = [{'type': options[action_index-1], 'data': {'goal': goal}}]\n            \n    return {'action': 'create', 'node_blueprints': node_blueprints}\n",
        "description": "Routes a task to the appropriate next action.\n\tInput: A list of subtasks (list), a string describing the context of the goal (str), and a boolean indicating whether the subtasks should be executed in parallel or sequentially (bool)\n\tReturns: None\nCalls the subtask_router_agent to route a subtask to the appropriate next action. Schedules tasks in swarm correspondingly:\nA dictionary with the following keys:\n\t'next_action': An integer indicating the next action to take (1: break_down_goal, 2: write_text, 3: write_python, 4: retrieve_info, 5: ask_user_for_help)",
        "language": "python"
    },
    "write_python": {
        "script": "from swarm.swarm import Swarm\nfrom swarm.agent import Agent\nfrom task import Task\nasync def write_python(goal):\n    swarm = Swarm()\n    python_agent: Agent = swarm.agents['write_python_agent']\n    \n    tool_output = await python_agent.chat(goal)\n    code_type = tool_output['arguments']['code_type']\n    python_code = tool_output['arguments']['python_code']\n    name = tool_output['arguments']['name']\n    description = tool_output['arguments']['description']\n    \n    next_task = Task('save_python_code', tool_output['arguments'])\n    swarm.task_queue.put_nowait(next_task)\n    save_message = f'The code we wrote to solve: {goal} \\n{name}\\nCode Type (0: Function, 1: Class, 2: Script) - {code_type}\\n{python_code}\\n{description}'\n    swarm.save(swarm.save_path, save_message)",
        "description": "Writes python code to solve a problem.\n\tInput: A goal containing context (str)\n\tReturns: None\nCalls the write_python_agent to write python code. Passes this to save_python_code:\nA dictionary with the following keys:\n\t'code_type': An integer indicating the type of code (0: Function, 1: Class, 2: Script)\n\t'python_code': A string containing the python code\n\t'name': A string containing the name of the code\n\t'description': A string describing the code",
        "language": "python"
    },
    "save_python_code": {
        "script": "from swarm.memory.save_code import save_python_code \nasync def save_python_code(code_type, python_code, name, description):\n    save_python_code(code_type, python_code, name, description)",
        "description": "Saves python code to appropriate place.\n\tInput: A dictionary containing the code_type (int), python_code (str), name (str), and description (str)\n\tReturns: None\nCalls the save_python_code function from the save_code module.",
        "language": "python"
    },
    "manager": {
        "script": "from swarm.swarm import Swarm\nasync def break_down_goal(goal, context):\n    swarm = Swarm()\n    manager = swarm.agents['manager']\n    broken_down_goal = await manager.chat(f'Context to understand the goal: {context}\\n\\n\\n The goal: {goal}')\n\n    node_blueprints = []\n    for subgoal in broken_down_goal['arguments']['subtasks']:\n        data = {\n            'goal': subgoal,\n            'context': broken_down_goal['arguments']['context']\n        }\n        node_blueprints.append({'type': 'route', 'data': data})\n        if broken_down_goal['arguments']['is_parallel']:\n            break\n    return node_blueprints\n",
        "description": "Breaks down a goal into subtasks.\n\tInput: Any arbitray goal (str)\n\tReturns: None\nCalls the head_agent to break down the goal. Then, calls the router_agent to route subtasks to the appropriate next action. Passes this to router from head_agent:\nA dictionary with the following keys:\n\t'subtasks': A list of subtasks (str)\n\t'context': A string describing the context of the goal\n\t'is_parallel': A boolean indicating whether the subtasks should be executed in parallel or sequentially",
        "language": "python"
    }
}