{
    "router": {
        "script": "from swarm.swarm import Swarm\nasync def router(goal):\n    swarm = Swarm()\n    router_agent = swarm.agents['router']\n    options = ['user_assistance', 'python_coder', 'manager', 'writer', 'retrieval']\n    \n    agent_index = await router_agent.chat(goal)\n    agent_index = agent_index['arguments']['agent_index']\n    \n    if agent_index == 0: # User assistance\n        while True:\n            user_input = input(f\"The router agent needs assistance routing this goal:\\n\\n{goal}\\n\\nPlease choose the index of the agent this goal should be routed to: {options}\")\n            if user_input.isdigit():\n                user_number = int(user_input)\n                if 1 <= user_number <= len(options):\n                    print(f\"You chose the number: {user_number}\")\n                    agent_index = user_number\n                    break\n                else:\n                    print(\"Number out of range. Please try again. Don't select user_assistance again.\")\n            else:\n                print(\"Invalid input. Please enter a number.\")\n                \n    node_blueprints = [{'type': options[agent_index], 'data': {'goal': goal}}]\n    return {'action': 'spawn', 'node_blueprints': node_blueprints}\n",
        "description": "Routes a task to the appropriate next action.\n\tInput: A list of subtasks (list), a string describing the context of the goal (str), and a boolean indicating whether the subtasks should be executed in parallel or sequentially (bool)\n\tReturns: None\nCalls the subtask_router_agent to route a subtask to the appropriate next action. Schedules tasks in swarm correspondingly:\nA dictionary with the following keys:\n\t'next_action': An integer indicating the next action to take (1: break_down_goal, 2: write_text, 3: write_python, 4: retrieve_info, 5: ask_user_for_help)",
        "language": "python"
    },
    "manager": {
        "script": "from swarm.swarm import Swarm\nasync def manager(goal):\n    swarm = Swarm()\n    manager = swarm.agents['manager']\n    \n    while True:\n        broken_down_goal = await manager.chat(goal)\n        agent_has_questions = broken_down_goal['arguments']['do_you_have_questions']\n\n        if agent_has_questions:\n            question = broken_down_goal['arguments']['question']\n            user_input = input(f\"\\n\\nQuestions: {question}\\n\\nGoal: {goal}\\n\\n\")\n            goal = f'{goal}\\n\\nQuestion: {question} \\n\\nUser answer: {user_input}'\n        else:\n            subgoals = broken_down_goal['arguments']['subgoals']\n            break\n            \n    node_blueprints = []\n    for subgoal in subgoals:\n        node_blueprints.append({'type': 'router', 'data': {'goal': subgoal}})\n\n    return {'action': 'spawn', 'node_blueprints': node_blueprints}\n",
        "description": "Breaks down a goal into subtasks.\n\tInput: Any arbitray goal (str)\n\tReturns: None\nCalls the head_agent to break down the goal. Then, calls the router_agent to route subtasks to the appropriate next action. Passes this to router from head_agent:\nA dictionary with the following keys:\n\t'subtasks': A list of subtasks (str)\n\t'context': A string describing the context of the goal\n\t'is_parallel': A boolean indicating whether the subtasks should be executed in parallel or sequentially",
        "language": "python"
    },
    "python_coder": {
        "script": "from swarm.swarm import Swarm\nfrom settings import Settings\nimport json\nsettings = Settings() # For config paths\n\nasync def python_coder(goal):\n    swarm = Swarm()\n    \n    # Gather all relevant context\n    code_analyst = swarm.agents['code_analyst']\n    while True:\n        questions = await code_analyst.chat(goal)\n        analyst_has_questions = questions['arguments']['do_you_have_questions']\n        \n        if analyst_has_questions:\n            questions = questions['arguments']['questions']\n            user_input = input(f\"\\n\\nGoal: {goal}\\n\\nQuestions: {questions}\\n\")\n            goal = f'{goal}\\n\\nQuestions: {questions} \\n\\nUser answer: {user_input}'\n        else: \n            break\n\n    # Write code\n    python_coder = swarm.agents['python_coder']\n    code = await python_coder.chat(goal)\n    code_type = ['function', 'class', 'script', 'other']\n    packet = {\n        'language': 'python',\n        'code_type': code_type[code['arguments']['code_type']],\n        'code': code['arguments']['python_code'],\n        'description': code['arguments']['description'],\n        'dependencies': code['arguments']['dependencies']\n    }\n\n    file_name = settings.SYNTHETIC_CODE_PATH\n    with open(file_name, 'r') as file:\n        data = json.load(file)\n    data[code['arguments']['name']] = packet\n    with open(file_name, 'w') as file:\n        json.dump(data, file, indent=4)\n\n    return {'action': 'terminate', 'node_blueprints': []}    \n",
        "description": "",
        "language": ""
    }
}